var documenterSearchIndex = {"docs":
[{"location":"#OceanData","page":"Home","title":"OceanData","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for OceanData.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#OceanData.refraction_index-Tuple{Union{Quantity{T, 𝐋 𝐓^-1, U}, Level{L, S, Quantity{T, 𝐋 𝐓^-1, U}} where {L, S}} where {T, U}}","page":"Home","title":"OceanData.refraction_index","text":"Use similarly to soundspeed but with extra kwarg c0 with reference sound speed, defaulting to 1500m/s\n\n\n\n\n\n","category":"method"},{"location":"#OceanData.Copernicus.date","page":"Home","title":"OceanData.Copernicus.date","text":"The current date of the loaded database\n\n\n\n\n\n","category":"constant"},{"location":"#OceanData.Copernicus.extend","page":"Home","title":"OceanData.Copernicus.extend","text":"Whether the loaded database is extended or has missing values where the seabed is\n\n\n\n\n\n","category":"constant"},{"location":"#OceanData.Copernicus.sal0","page":"Home","title":"OceanData.Copernicus.sal0","text":"Default surface salinity for points where it is missing\n\n\n\n\n\n","category":"constant"},{"location":"#OceanData.Copernicus.standard_depths","page":"Home","title":"OceanData.Copernicus.standard_depths","text":"standard_depths\n\nA vector with the dephts reported in the Copernicus database.\n\nI don't recall for which day I got this data, and I haven't checked how different it is in the other Copernicus databases out there. But, it is something, and it has the expected feature of being finer-grained at low depths and coarser at greater depths where the profile variations tend to be smoother.\n\n\n\n\n\n","category":"constant"},{"location":"#OceanData.Copernicus.temp0","page":"Home","title":"OceanData.Copernicus.temp0","text":"Default surface temperature for points where it is missing\n\n\n\n\n\n","category":"constant"},{"location":"#OceanData.Copernicus.leroy-NTuple{4, Any}","page":"Home","title":"OceanData.Copernicus.leroy","text":"leroy(salility, temperature, depth, lat)\nleroy(salinity, temperature, depth, (lat, lon))\n\nReturn the sound speed according to Leroy's formula.\n\nTemperature and depth must be given in the appropriate units. The latitude must be in degrees.  Salinity, when given without units, is assumed to be in per thousand, but when explicitly given with (dimensionless) units (e.g. g/kg, permille), it's assumed as such.\n\nThe (lat, lon) version is provided for convenience; longitude is irrelevant.\n\nExample\n\njulia> using OceanData\n\njulia> OceanData.Copernicus.leroy(34.2, 15°C, 50m, 34°)\n1506.6221178062503 m s^-1\n\njulia> OceanData.Copernicus.leroy(34.2, 15°C, 50m, (34°, -48°))\n1506.6221178062503 m s^-1\n\n\n\n\n\n","category":"method"},{"location":"#OceanData.Copernicus.makeprofile-Tuple{AbstractVector{<:Tuple{Union{Quantity{T, 𝐋, U}, Level{L, S, Quantity{T, 𝐋, U}} where {L, S}} where {T, U}, Number}}}","page":"Home","title":"OceanData.Copernicus.makeprofile","text":"makeprofile(cz::Vector; zmax=nothing, zs=nothing)\n\nThis already receives a profile (vector of (z, val) pairs). All it does is  validate zmax and zs.\n\nIf the keyword arguments are nothing, then that check isn't carried out.\n\nI should check why this exists and whether it makes sense for this method to exist at all.\n\n\n\n\n\n","category":"method"},{"location":"#OceanData.Copernicus.makeprofile-Tuple{Any}","page":"Home","title":"OceanData.Copernicus.makeprofile","text":"makeprofile(pfun; zmax=8000m, zs=standard_depths)\n\nReturn a profile as a vector of 2-tuples (depth, value) from the function pfun(z).\n\nExample\n\njulia> using OceanData\n\njulia> prof = soundspeed((-45.2°, -54°); date=Date(2017, 12, 1)) |> makeprofile\n76-element Vector{Tuple{Quantity{Float64, 𝐋, Unitful.FreeUnits{(m,), 𝐋, nothing}}, Any}}:\n (0.50576 m, 1494.565760656654 m s^-1)\n (1.555855 m, 1494.4249056870487 m s^-1)\n (2.667682 m, 1494.31210736624 m s^-1)\n (3.85628 m, 1494.227685610145 m s^-1)\n (5.140361 m, 1494.1938229984985 m s^-1)\n (6.543034 m, 1494.1891295157416 m s^-1)\n (8.092519 m, 1494.1649669345345 m s^-1)\n (9.82275 m, 1494.1512134131285 m s^-1)\n (11.77368 m, 1494.0624681076447 m s^-1)\n (13.99104 m, 1493.934152456295 m s^-1)\n ⋮\n (4488.155 m, 1525.8759999599588 m s^-1)\n (4687.581 m, 1529.0549497154045 m s^-1)\n (4888.07 m, 1532.4097536968802 m s^-1)\n (5089.479 m, 1535.9092242642012 m s^-1)\n (5291.683 m, 1539.5087758967625 m s^-1)\n (5494.575 m, 1543.170343994254 m s^-1)\n (5698.061 m, 1546.8756085367884 m s^-1)\n (5902.058 m, missing)\n (8000.0 m, missing)\n\njulia> prof[1:3]\n3-element Vector{Tuple{Quantity{Float64, 𝐋, Unitful.FreeUnits{(m,), 𝐋, nothing}}, Any}}:\n (0.50576 m, 1494.565760656654 m s^-1)\n (1.555855 m, 1494.4249056870487 m s^-1)\n (2.667682 m, 1494.31210736624 m s^-1)\n\njulia> prof[end]\n(8000.0 m, missing)\n\n\n\n\n\n","category":"method"},{"location":"#OceanData.Copernicus.makeprofile-Tuple{Number}","page":"Home","title":"OceanData.Copernicus.makeprofile","text":"makeprofile(kt; zmax=8000m, zs=standard_depths)\n\nReturn a constant profile.\n\nIt's equivalent to makeprofile(z -> kt, zmax, zs).\n\n\n\n\n\n","category":"method"},{"location":"#OceanData.Copernicus.salinity-Tuple{Any, Union{Quantity{T, 𝐋, U}, Level{L, S, Quantity{T, 𝐋, U}} where {L, S}} where {T, U}}","page":"Home","title":"OceanData.Copernicus.salinity","text":"salinity(loc, z; date, extend=false)\n\nReturn the salinity at geo-location loc and depth z.\n\nKeyword arguments\n\nextend determines whether missing values –typically under the seabed but not always–\n\nshould be extended by holding salinity constant. Actually, temperature is held constant only at the locations for which the original grid has data, and other values get interpolated for that; which means at most positions the salinity returned won't be a constant within the seabed.\n\ndate isn't actually necessary. If it is not supplied, the currently loaded date\n\nis used, with a warning every time. It is recommended to pass an explicit date, represented by a Dates.Date obect: e.g., Date(2017,12,1).\n\nExample\n\njulia> using OceanData\n\njulia> salinity((-54°, -45°), 100m; date=Date(2017, 12, 1))\n33.96875f0\n\njulia> salinity((-54°, -45°), 10000m; date=Date(2017, 12, 1))\nmissing\n\njulia> salinity((-54°, -45°), 10000m; date=Date(2017, 12, 1), extend=true)\n34.6875f0\n\n\n\n\n\n","category":"method"},{"location":"#OceanData.Copernicus.salinity-Tuple{Any}","page":"Home","title":"OceanData.Copernicus.salinity","text":"salinity(loc; date, extend=false)\n\nReturn a function of the depth.\n\nThe keyword arguments represent the same as in the full uncurried method.\n\nExample\n\njulia> using OceanData\n\njulia> date = Date(2017, 12, 1)\n2017-12-01\n\njulia> sz = salinity((-45°, -40°); date);\n\njulia> sz.([10m, 123m])\n2-element Vector{Float32}:\n 34.5\n 34.5\n\n\n\n\n\n","category":"method"},{"location":"#OceanData.Copernicus.setextend-Tuple{Any}","page":"Home","title":"OceanData.Copernicus.setextend","text":"Set the database to extend the profiles.\n\n\n\n\n\n","category":"method"},{"location":"#OceanData.Copernicus.soundspeed-Tuple{Any, Any}","page":"Home","title":"OceanData.Copernicus.soundspeed","text":"soundspeed(loc, z; date, extend=false)\n\nReturn the sound speed at geo-location loc and depth z.\n\nKeyword arguments\n\nextend determines whether missing values –typically under the seabed but not always–\n\nshould be extended by holding temperature and salinity constants. \n\ndate isn't actually necessary. If it is not supplied, the currently loaded date\n\nis used, with a warning every time. It is recommended to pass an explicit date, represented by a Dates.Date obect: e.g., Date(2017,12,1).\n\nExample\n\njulia> using OceanData\n\njulia> soundspeed((-54°, -45°), 100m; date=Date(2017, 12, 1))\n1458.7851534823935 m s^-1\n\njulia> soundspeed((-54°, -45°), 10000m; date=Date(2017, 12, 1))\nmissing\n\njulia> soundspeed((-54°, -45°), 10000m; date=Date(2017, 12, 1), extend=true)\n1629.533726798885 m s^-1\n\n\n\n\n\n","category":"method"},{"location":"#OceanData.Copernicus.soundspeed-Tuple{Any}","page":"Home","title":"OceanData.Copernicus.soundspeed","text":"soundspeed(loc; date, extend=false)\n\nReturn a function of the depth.\n\nThe keyword arguments represent the same as in the full uncurried method.\n\nExample\n\njulia> using OceanData\n\njulia> date = Date(2017, 12, 1)\n2017-12-01\n\njulia> cz = soundspeed((-45°, -40°); date);\n\njulia> cz(10m)\n1490.779038765148 m s^-1\n\n\n\n\n\n","category":"method"},{"location":"#OceanData.Copernicus.temperature-Tuple{Any, Union{Quantity{T, 𝐋, U}, Level{L, S, Quantity{T, 𝐋, U}} where {L, S}} where {T, U}}","page":"Home","title":"OceanData.Copernicus.temperature","text":"temperature(loc, z; date, extend=false)\n\nReturn the temperature at geo-location loc and depth z.\n\nKeyword arguments\n\nextend determines whether missing values –typically under the seabed but not always–\n\nshould be extended by holding temperature constant. Actually, temperature is held constant only at the locations for which the original grid has data, and other values get interpolated for that; which means at most positions the temperature returned won't be a constant within the seabed.\n\ndate isn't actually necessary. If it is not supplied, the currently loaded date\n\nis used, with a warning every time. It is recommended to pass an explicit date, represented by a Dates.Date obect: e.g., Date(2017,12,1).\n\nExample\n\njulia> using OceanData\n\njulia> temperature((-54°, -45°), 100m; date=Date(2017, 12, 1))\n2.122145f0 °C\n\njulia> temperature((-54°, -45°), 10000m; date=Date(2017, 12, 1))\nmissing\n\njulia> temperature((-54°, -45°), 10000m; date=Date(2017, 12, 1), extend=true)\n0.45288086f0 °C\n\n\n\n\n\n","category":"method"},{"location":"#OceanData.Copernicus.temperature-Tuple{Any}","page":"Home","title":"OceanData.Copernicus.temperature","text":"temperature(loc; date, extend=false)\n\nReturn a function of the depth.\n\nThe keyword arguments represent the same as in the full uncurried method.\n\nExample\n\njulia> using OceanData\n\njulia> date = Date(2017, 12, 1)\n2017-12-01\n\njulia> tz = temperature((-45°, -40°); date);\n\njulia> tz.([10m, 123m])\n2-element Vector{Quantity{Float32, 𝚯, Unitful.FreeUnits{(K,), 𝚯, Unitful.Affine{-5463//20}}}}:\n 10.391339f0 °C\n  8.58506f0 °C\n\n\n\n\n\n","category":"method"}]
}
